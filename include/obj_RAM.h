////////////////////////////////////////////////////////////////////////////////
//
// LRU (Generic)
//
// Desc: obj_RAM.h
// Header file for the RAM object.
//
// 27/08/2022 (José Benavente & Claudia Villagrán)
// File inception.
//
////////////////////////////////////////////////////////////////////////////////

#include "main.h"

////////////////////////////////////////////////////////////////////////////////
// Macros:
////////////////////////////////////////////////////////////////////////////////

#define UNSET_VAL -1      // Represents values pending to be set
#define REQUESTS 20       // Number of requests the RAM will be able to process
#define FRAMES 4          // Number of page frames for the RAM

////////////////////////////////////////////////////////////////////////////////
// Types:
////////////////////////////////////////////////////////////////////////////////

typedef struct RAM {
    FILE *logFile;
    int requests[REQUESTS];
    int contents[FRAMES][REQUESTS];
    int lruMatrix[FRAMES][FRAMES];
    int faults;
} RAM;

////////////////////////////////////////////////////////////////////////////////
// Prototypes:
////////////////////////////////////////////////////////////////////////////////

void InitRAM(RAM *ram);
void FreeRAM(RAM *ram);
void ProcessRAMValues(RAM *ram, int values[REQUESTS]);
void ProcessRAMValue(RAM *ram, int v);
void RenderRAM(RAM *ram);
void UpdateRAMLRU(RAM *ram, int page);
int GetLRUPage(RAM *ram);
void WriteLogEntry(RAM *ram, const char *str, ...);

////////////////////////////////////////////////////////////////////////////////
// Globals:
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Procedures:
////////////////////////////////////////////////////////////////////////////////
